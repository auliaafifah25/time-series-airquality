# -*- coding: utf-8 -*-
"""Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W1pQMtZ9tdT5JGylcPTY5EvARhERqf7q

- **Nama:** Aulia Afifah
- **ID Dicoding:** auliaafifah253
- Kaggle: https://www.kaggle.com/datasets/tawfikelmetwally/air-quality-dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv('Air Quality.csv')
df.head()

df = df.drop(columns=['Unnamed: 15', 'Unnamed: 16'])

df.head()

df.info()

df.isnull().sum()

df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df['Time'] = pd.to_datetime(df['Time'], format='%H:%M:%S', errors='coerce').dt.time

df['Date'] = df['Date'].fillna(method='ffill')
df['Time'] = df['Time'].fillna(method='ffill')
df['CO(GT)'] = df['CO(GT)'].fillna(df['CO(GT)'].mean())
df['PT08.S1(CO)'] = df['PT08.S1(CO)'].fillna(df['PT08.S1(CO)'].mean())
df['NMHC(GT)'] = df['NMHC(GT)'].fillna(df['NMHC(GT)'].mean())
df['C6H6(GT)'] = df['C6H6(GT)'].fillna(df['C6H6(GT)'].mean())
df['PT08.S2(NMHC)'] = df['PT08.S2(NMHC)'].fillna(df['PT08.S2(NMHC)'].mean())
df['NOx(GT)'] = df['NOx(GT)'].fillna(df['NOx(GT)'].mean())
df['PT08.S3(NOx)'] = df['PT08.S3(NOx)'].fillna(df['PT08.S3(NOx)'].mean())
df['NO2(GT)'] = df['NO2(GT)'].fillna(df['NO2(GT)'].mean())
df['PT08.S4(NO2)'] = df['PT08.S4(NO2)'].fillna(df['PT08.S4(NO2)'].mean())
df['PT08.S5(O3)'] = df['PT08.S5(O3)'].fillna(df['PT08.S5(O3)'].mean())
df['T'] = df['T'].fillna(df['T'].mean())
df['RH'] = df['RH'].fillna(df['RH'].mean())
df['AH'] = df['AH'].fillna(df['AH'].mean())

df.isnull().sum()

df.head()

dates = df['Date'].values
quality  = df['CO(GT)'].values


plt.figure(figsize=(15,5))
plt.plot(dates, quality)
plt.title('Air Quality Index average',
          fontsize=20);

df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')

X = df['Date'].map(pd.Timestamp.toordinal).values.reshape(-1, 1)
y = df['CO(GT)'].values

scaler_X = MinMaxScaler()
scaler_y = MinMaxScaler()

X = scaler_X.fit_transform(df['Date'].map(pd.Timestamp.toordinal).values.reshape(-1, 1))
y = scaler_y.fit_transform(df[['CO(GT)']])

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, shuffle=False)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    if shuffle_buffer > 0:
        ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

window_size = 60
batch_size = 100
shuffle_buffer = 1000

train_set = windowed_dataset(y_train, window_size, batch_size, shuffle_buffer)
val_set = windowed_dataset(y_val, window_size, batch_size, shuffle_buffer)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(30, return_sequences=True, input_shape=(window_size, 1)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.LSTM(30, return_sequences=True),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.LSTM(30),
    tf.keras.layers.Dense(15, activation='relu'),
    tf.keras.layers.Dense(7, activation='relu'),
    tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,epochs=15)

loss, mae = model.evaluate(val_set)

print(f"Loss pada set validasi yaitu: {loss}")
print(f"MAE pada set validasi yaitu: {mae}")

y_min = y.min()
y_max = y.max()
threshold_mae = (y_max - y_min) * 10 / 100

print(f"Ambang batas MAE yaitu: {threshold_mae:.4f}")

if mae < threshold_mae:
    print(f"Memenuhi kriteria yang mengharuskan model memiliki nilai MAE < 10% skala data yaitu: {mae:.4f}")
else:
    print(f"Tidak memenuhi kriteria yang mengharuskan model memiliki nilai MAE < 10% skala data yaitu: {mae:.4f}")